name: Create Release

on:
  push:
    branches:
      - "main"
    paths-ignore: 
      - 'Cargo.lock'
      - 'Cargo.toml'
      
jobs:
  bump-version:
    name: Bump Version
    uses: ./.github/workflows/bump-version.yml
    with:
      version-type: "patch"
    secrets: inherit

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ needs.bump-version.outputs.version }}
          release_name: rhc ${{ needs.bump-version.outputs.version }}
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ needs.bump-version.outputs.version }}

  build-release:
    name: Build Release
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, win-gnu] # linux-arm, macos, win-msvc, win-gnu, win32-msvc
        include:
        - build: linux
          os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux-musl
        # - build: linux-arm
        #   os: ubuntu-22.04
        #   rust: nightly
        #   target: arm-unknown-linux-gnueabihf
        # - build: macos
        #   os: macos-12
        #   rust: nightly
        #   target: x86_64-apple-darwin
        # - build: win-msvc
        #   os: windows-2022
        #   rust: nightly
        #   target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-2022
          rust: stable
          target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2022
        #   rust: nightly
        #   target: i686-pc-windows-msvc
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}
    - name: Build release binary
      run: cargo build --verbose --release --target ${{ matrix.target }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/rhc"

    - name: Build archive
      shell: bash
      run: |
        staging="rhc-${{ needs.release.outputs.version }}-${{ matrix.target }}"
        mkdir $staging
        cp README.md "$staging/"
        if [ "${{ matrix.os }}" = "windows-2022" ]; then
          cp "target/${{ matrix.target }}/release/rhc.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "$outdir"/rg.1 "$staging/doc/"
          cp "target/${{ matrix.target }}/release/rhc" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
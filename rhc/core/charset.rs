use std::fmt::Display;

pub type Table = &'static [u8];

pub const ASCII_95_TABLE: Table = &ASCII_95;
pub const COMMON_TABLE: Table = &COMMON;
pub const NO_SPECIAL_TABLE: Table = &NO_SPECIAL;

#[derive(Debug, Clone, PartialEq)]
pub enum CharacterSet {
    Ascii95,
    Common,
    NoSpecial,
}

impl CharacterSet {
    pub fn from(value: &str) -> Option<Self> {
        match value {
            "ASCII_95" => Some(CharacterSet::Ascii95),
            "COMMON" => Some(CharacterSet::Common),
            "NO_SPECIAL" => Some(CharacterSet::NoSpecial),
            _ => None,
        }
    }

    pub fn get_table(&self) -> Table {
        match self {
            CharacterSet::Ascii95 => &ASCII_95,
            CharacterSet::Common => &COMMON,
            CharacterSet::NoSpecial => &NO_SPECIAL,
        }
    }
}

impl Display for CharacterSet {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CharacterSet::Ascii95 => f.write_str("ASCII_95"),
            CharacterSet::Common => f.write_str("COMMON"),
            CharacterSet::NoSpecial => f.write_str("NO_SPECIAL"),
        }
    }
}

// TODO: Combine these three into one single array to save binary size?
const ASCII_95: [u8; 95] = [
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E,
];

const COMMON: [u8; 77] = [
    0x21, 0x23, 0x24, 0x25, 0x26, 0x2a, 0x2b, 0x2d, 0x2e, 0x3a, 0x3b, 0x3d, 0x3f, 0x40, 0x5f, 0x30,
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
    0x78, 0x79, 0x7a, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d,
    0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
];

const NO_SPECIAL: [u8; 62] = [
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
    0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,
    0x77, 0x78, 0x79, 0x7a, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c,
    0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a,
];
